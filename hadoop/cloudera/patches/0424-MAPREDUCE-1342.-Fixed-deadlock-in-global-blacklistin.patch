From 10024643cacf3d40faa870505c83dd344f8ff366 Mon Sep 17 00:00:00 2001
From: Todd Lipcon <todd@cloudera.com>
Date: Wed, 13 Jan 2010 15:28:34 -0800
Subject: [PATCH 0424/1020] MAPREDUCE-1342. Fixed deadlock in global blacklisting of tasktrackers.

Patch: https://issues.apache.org/jira/secure/attachment/12430116/patch-1342-3-ydist.txt
Author: Amareshwari Sriramadasu
Ref: YDH
---
 .../org/apache/hadoop/mapred/JobTracker.java       |   65 ++++++++++++++-----
 1 files changed, 48 insertions(+), 17 deletions(-)

diff --git a/src/mapred/org/apache/hadoop/mapred/JobTracker.java b/src/mapred/org/apache/hadoop/mapred/JobTracker.java
index 90eacba..73719e9 100644
--- a/src/mapred/org/apache/hadoop/mapred/JobTracker.java
+++ b/src/mapred/org/apache/hadoop/mapred/JobTracker.java
@@ -721,6 +721,7 @@ public class JobTracker implements MRConstants, InterTrackerProtocol,
      * Increments faults(blacklist by job) for the tracker by one.
      * 
      * Adds the tracker to the potentially faulty list. 
+     * Assumes JobTracker is locked on the entry.
      * 
      * @param hostName 
      */
@@ -810,12 +811,16 @@ public class JobTracker implements MRConstants, InterTrackerProtocol,
       }
     }
     
+    // Assumes JobTracker is locked on the entry
     private FaultInfo getFaultInfo(String hostName, 
         boolean createIfNeccessary) {
-      FaultInfo fi = potentiallyFaultyTrackers.get(hostName);
-      if (fi == null && createIfNeccessary) {
-        fi = new FaultInfo();
-        potentiallyFaultyTrackers.put(hostName, fi);
+      FaultInfo fi = null;
+      synchronized (potentiallyFaultyTrackers) {
+        fi = potentiallyFaultyTrackers.get(hostName);
+        if (fi == null && createIfNeccessary) {
+          fi = new FaultInfo();
+          potentiallyFaultyTrackers.put(hostName, fi);
+        }
       }
       return fi;
     }
@@ -853,6 +858,8 @@ public class JobTracker implements MRConstants, InterTrackerProtocol,
      * Removes the tracker from blacklist and
      * from potentially faulty list, when it is restarted.
      * 
+     * Assumes JobTracker is locked on the entry.
+     * 
      * @param hostName
      */
     void markTrackerHealthy(String hostName) {
@@ -871,6 +878,7 @@ public class JobTracker implements MRConstants, InterTrackerProtocol,
      * One fault of the tracker is discarded if there
      * are no faults during one day. So, the tracker will get a 
      * chance again to run tasks of a job.
+     * Assumes JobTracker is locked on the entry.
      * 
      * @param hostName The tracker name
      * @param now The current time
@@ -939,6 +947,7 @@ public class JobTracker implements MRConstants, InterTrackerProtocol,
     /**
      * Whether a host is blacklisted across all the jobs. 
      * 
+     * Assumes JobTracker is locked on the entry.
      * @param hostName
      * @return
      */
@@ -952,6 +961,7 @@ public class JobTracker implements MRConstants, InterTrackerProtocol,
       return false;
     }
     
+    // Assumes JobTracker is locked on the entry.
     int getFaultCount(String hostName) {
       synchronized (potentiallyFaultyTrackers) {
         FaultInfo fi = null;
@@ -962,6 +972,7 @@ public class JobTracker implements MRConstants, InterTrackerProtocol,
       return 0;
     }
     
+    // Assumes JobTracker is locked on the entry.
     Set<ReasonForBlackListing> getReasonForBlackListing(String hostName) {
       synchronized (potentiallyFaultyTrackers) {
         FaultInfo fi = null;
@@ -973,6 +984,7 @@ public class JobTracker implements MRConstants, InterTrackerProtocol,
     }
 
 
+    // Assumes JobTracker is locked on the entry.
     void setNodeHealthStatus(String hostName, boolean isHealthy, String reason) {
       FaultInfo fi = null;
       // If tracker is not healthy, create a fault info object
@@ -1001,6 +1013,7 @@ public class JobTracker implements MRConstants, InterTrackerProtocol,
   /**
    * Get all task tracker statuses on given host
    * 
+   * Assumes JobTracker is locked on the entry
    * @param hostName
    * @return {@link java.util.List} of {@link TaskTrackerStatus}
    */
@@ -2705,7 +2718,8 @@ public class JobTracker implements MRConstants, InterTrackerProtocol,
    * 
    * @return {@link Collection} of {@link TaskTrackerStatus} 
    */
-  public Collection<TaskTrackerStatus> taskTrackers() {
+  // lock to taskTrackers should hold JT lock first.
+  public synchronized Collection<TaskTrackerStatus> taskTrackers() {
     Collection<TaskTrackerStatus> ttStatuses;
     synchronized (taskTrackers) {
       ttStatuses = 
@@ -2722,7 +2736,10 @@ public class JobTracker implements MRConstants, InterTrackerProtocol,
    *  
    * @return {@link Collection} of active {@link TaskTrackerStatus} 
    */
-  public Collection<TaskTrackerStatus> activeTaskTrackers() {
+  // This method is synchronized to make sure that the locking order 
+  // "taskTrackers lock followed by faultyTrackers.potentiallyFaultyTrackers 
+  // lock" is under JobTracker lock to avoid deadlocks.
+  synchronized public Collection<TaskTrackerStatus> activeTaskTrackers() {
     Collection<TaskTrackerStatus> activeTrackers = 
       new ArrayList<TaskTrackerStatus>();
     synchronized (taskTrackers) {
@@ -2742,7 +2759,10 @@ public class JobTracker implements MRConstants, InterTrackerProtocol,
    * The second element in the returned list contains the list of blacklisted
    * tracker names. 
    */
-  public List<List<String>> taskTrackerNames() {
+  // This method is synchronized to make sure that the locking order 
+  // "taskTrackers lock followed by faultyTrackers.potentiallyFaultyTrackers 
+  // lock" is under JobTracker lock to avoid deadlocks.
+  synchronized public List<List<String>> taskTrackerNames() {
     List<String> activeTrackers = 
       new ArrayList<String>();
     List<String> blacklistedTrackers = 
@@ -2768,7 +2788,10 @@ public class JobTracker implements MRConstants, InterTrackerProtocol,
    *  
    * @return {@link Collection} of blacklisted {@link TaskTrackerStatus} 
    */
-  public Collection<TaskTrackerStatus> blacklistedTaskTrackers() {
+  // This method is synchronized to make sure that the locking order 
+  // "taskTrackers lock followed by faultyTrackers.potentiallyFaultyTrackers 
+  // lock" is under JobTracker lock to avoid deadlocks.
+  synchronized public Collection<TaskTrackerStatus> blacklistedTaskTrackers() {
     Collection<TaskTrackerStatus> blacklistedTrackers = 
       new ArrayList<TaskTrackerStatus>();
     synchronized (taskTrackers) {
@@ -2782,7 +2805,7 @@ public class JobTracker implements MRConstants, InterTrackerProtocol,
     return blacklistedTrackers;
   }
 
-  int getFaultCount(String hostName) {
+  synchronized int getFaultCount(String hostName) {
     return faultyTrackers.getFaultCount(hostName);
   }
   
@@ -2802,7 +2825,7 @@ public class JobTracker implements MRConstants, InterTrackerProtocol,
    * 
    * @return true if blacklisted, false otherwise
    */
-  public boolean isBlacklisted(String trackerID) {
+  synchronized public boolean isBlacklisted(String trackerID) {
     TaskTrackerStatus status = getTaskTrackerStatus(trackerID);
     if (status != null) {
       return faultyTrackers.isBlacklisted(status.getHost());
@@ -2810,7 +2833,8 @@ public class JobTracker implements MRConstants, InterTrackerProtocol,
     return false;
   }
   
-  public TaskTrackerStatus getTaskTrackerStatus(String trackerID) {
+  // lock to taskTrackers should hold JT lock first.
+  synchronized public TaskTrackerStatus getTaskTrackerStatus(String trackerID) {
     TaskTracker taskTracker;
     synchronized (taskTrackers) {
       taskTracker = taskTrackers.get(trackerID);
@@ -2818,7 +2842,8 @@ public class JobTracker implements MRConstants, InterTrackerProtocol,
     return (taskTracker == null) ? null : taskTracker.getStatus();
   }
 
-  public TaskTracker getTaskTracker(String trackerID) {
+  // lock to taskTrackers should hold JT lock first.
+  synchronized public TaskTracker getTaskTracker(String trackerID) {
     synchronized (taskTrackers) {
       return taskTrackers.get(trackerID);
     }
@@ -2831,7 +2856,7 @@ public class JobTracker implements MRConstants, InterTrackerProtocol,
    * Adds a new node to the jobtracker. It involves adding it to the expiry
    * thread and adding it for resolution
    * 
-   * Assuming trackerExpiryQueue is locked on entry
+   * Assumes JobTracker, taskTrackers and trackerExpiryQueue is locked on entry
    * 
    * @param status Task Tracker's status
    */
@@ -4354,6 +4379,7 @@ public class JobTracker implements MRConstants, InterTrackerProtocol,
     decommissionNodes(excludeSet);
   }
 
+  // Assumes JobTracker, taskTrackers and trackerExpiryQueue is locked on entry
   // Remove a tracker from the system
   private void removeTracker(TaskTracker tracker) {
     String trackerName = tracker.getTrackerName();
@@ -4633,7 +4659,7 @@ public class JobTracker implements MRConstants, InterTrackerProtocol,
     this.queueManager.refreshAcls(new Configuration(this.conf));
   }
   
-  String getReasonsForBlacklisting(String host) {
+  synchronized String getReasonsForBlacklisting(String host) {
     FaultInfo fi = faultyTrackers.getFaultInfo(host, false);
     if (fi == null) {
       return "";
@@ -4642,15 +4668,20 @@ public class JobTracker implements MRConstants, InterTrackerProtocol,
   }
 
   /** Test Methods */
-  Set<ReasonForBlackListing> getReasonForBlackList(String host) {
+  synchronized Set<ReasonForBlackListing> getReasonForBlackList(String host) {
     FaultInfo fi = faultyTrackers.getFaultInfo(host, false);
     if (fi == null) {
       return new HashSet<ReasonForBlackListing>();
     }
     return fi.getReasonforblacklisting();
   }
-  
-  void incrementFaults(String hostName) {
+
+  /* 
+   * This method is synchronized to make sure that the locking order 
+   * "faultyTrackers.potentiallyFaultyTrackers lock followed by taskTrackers 
+   * lock" is under JobTracker lock to avoid deadlocks.
+   */
+  synchronized void incrementFaults(String hostName) {
     faultyTrackers.incrementFaults(hostName);
   }
 }
-- 
1.7.0.4

