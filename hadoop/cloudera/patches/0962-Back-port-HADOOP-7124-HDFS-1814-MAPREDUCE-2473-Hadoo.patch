From 1db6dae127e0a93084ab4cebb840d3af91e429c0 Mon Sep 17 00:00:00 2001
From: Aaron T. Myers <atm@cloudera.com>
Date: Mon, 16 May 2011 19:17:18 -0700
Subject: [PATCH 0962/1020] Back-port HADOOP-7124, HDFS-1814, MAPREDUCE-2473 - Hadoop /usr/bin/groups equivalent

Reason: Allows users to query and display their group membership.
Author: Aaron T. Myers
Ref: CDH-2986
---
 bin/hadoop                                         |    8 ++
 .../org/apache/hadoop/tools/GetGroupsBase.java     |  107 ++++++++++++++++
 .../hadoop/tools/GetUserMappingsProtocol.java      |   46 +++++++
 .../org/apache/hadoop/hdfs/HDFSPolicyProvider.java |    3 +
 .../hadoop/hdfs/server/namenode/NameNode.java      |   16 ++-
 .../org/apache/hadoop/hdfs/tools/GetGroups.java    |   58 +++++++++
 .../org/apache/hadoop/mapred/JobTracker.java       |   13 ++-
 .../hadoop/mapred/MapReducePolicyProvider.java     |    3 +
 .../org/apache/hadoop/mapred/tools/GetGroups.java  |   58 +++++++++
 .../hadoop/hdfs/tools/TestGetHdfsGroups.java       |   54 ++++++++
 .../mapred/tools/TestGetMapReduceGroups.java       |   53 ++++++++
 .../org/apache/hadoop/tools/GetGroupsTestBase.java |  127 ++++++++++++++++++++
 12 files changed, 543 insertions(+), 3 deletions(-)
 create mode 100644 src/core/org/apache/hadoop/tools/GetGroupsBase.java
 create mode 100644 src/core/org/apache/hadoop/tools/GetUserMappingsProtocol.java
 create mode 100644 src/hdfs/org/apache/hadoop/hdfs/tools/GetGroups.java
 create mode 100644 src/mapred/org/apache/hadoop/mapred/tools/GetGroups.java
 create mode 100644 src/test/org/apache/hadoop/hdfs/tools/TestGetHdfsGroups.java
 create mode 100644 src/test/org/apache/hadoop/mapred/tools/TestGetMapReduceGroups.java
 create mode 100644 src/test/org/apache/hadoop/tools/GetGroupsTestBase.java

diff --git a/bin/hadoop b/bin/hadoop
index 0b27157..222861b 100755
--- a/bin/hadoop
+++ b/bin/hadoop
@@ -83,6 +83,8 @@ if [ $# = 0 ]; then
   echo "  archive -archiveName NAME -p <parent path> <src>* <dest> create a hadoop archive"
   echo "  oiv                  apply the offline fsimage viewer to an fsimage"
   echo "  classpath            prints the class path needed to get the"
+  echo "  dfsgroups            get the groups which users belong to on the Name Node"
+  echo "  mrgroups             get the groups which users belong to on the Job Tracker"
   echo "                       Hadoop jar and the required libraries"
   echo "  daemonlog            get/set the log level for each daemon"
   echo " or"
@@ -270,6 +272,12 @@ elif [ "$COMMAND" = "oiv" ] ; then
 elif [ "$COMMAND" = "sampler" ] ; then
   CLASS=org.apache.hadoop.mapred.lib.InputSampler
   HADOOP_OPTS="$HADOOP_OPTS $HADOOP_CLIENT_OPTS"
+elif [ "$COMMAND" = "dfsgroups" ] ; then
+  CLASS=org.apache.hadoop.hdfs.tools.GetGroups
+  HADOOP_OPTS="$HADOOP_OPTS $HADOOP_CLIENT_OPTS"
+elif [ "$COMMAND" = "mrgroups" ] ; then
+  CLASS=org.apache.hadoop.mapred.tools.GetGroups
+  HADOOP_OPTS="$HADOOP_OPTS $HADOOP_CLIENT_OPTS"
 else
   CLASS=$COMMAND
 fi
diff --git a/src/core/org/apache/hadoop/tools/GetGroupsBase.java b/src/core/org/apache/hadoop/tools/GetGroupsBase.java
new file mode 100644
index 0000000..7e964de
--- /dev/null
+++ b/src/core/org/apache/hadoop/tools/GetGroupsBase.java
@@ -0,0 +1,107 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.hadoop.tools;
+
+import java.io.IOException;
+import java.io.PrintStream;
+import java.net.InetSocketAddress;
+
+import org.apache.hadoop.conf.Configuration;
+import org.apache.hadoop.conf.Configured;
+import org.apache.hadoop.ipc.RPC;
+import org.apache.hadoop.net.NetUtils;
+import org.apache.hadoop.security.UserGroupInformation;
+import org.apache.hadoop.util.Tool;
+
+/**
+ * Base class for the HDFS and MR implementations of tools which fetch and
+ * display the groups that users belong to.
+ */
+public abstract class GetGroupsBase extends Configured implements Tool {
+
+  private PrintStream out;
+
+  /**
+   * Create an instance of this tool using the given configuration.
+   * @param conf
+   */
+  protected GetGroupsBase(Configuration conf) {
+    this(conf, System.out);
+  }
+
+  /**
+   * Used exclusively for testing.
+   *
+   * @param conf The configuration to use.
+   * @param out The PrintStream to write to, instead of System.out
+   */
+  protected GetGroupsBase(Configuration conf, PrintStream out) {
+    super(conf);
+    this.out = out;
+  }
+
+  /**
+   * Get the groups for the users given and print formatted output to the
+   * {@link PrintStream} configured earlier.
+   */
+  @Override
+  public int run(String[] args) throws Exception {
+    if (args.length == 0) {
+      args = new String[] { UserGroupInformation.getCurrentUser().getUserName() };
+    }
+
+    for (String username : args) {
+      StringBuilder sb = new StringBuilder();
+      sb.append(username + " :");
+      for (String group : getUgmProtocol().getGroupsForUser(username)) {
+        sb.append(" ");
+        sb.append(group);
+      }
+      out.println(sb);
+    }
+
+    return 0;
+  }
+  
+  /**
+   * Must be overridden by subclasses to get the address where the
+   * {@link GetUserMappingsProtocol} implementation is running.
+   *
+   * @param conf The configuration to use.
+   * @return The address where the service is listening.
+   * @throws IOException
+   */
+  protected abstract InetSocketAddress getProtocolAddress(Configuration conf)
+      throws IOException;
+
+  /**
+   * Get a client of the {@link GetUserMappingsProtocol}.
+   * @return A {@link GetUserMappingsProtocol} client proxy.
+   * @throws IOException
+   */
+  private GetUserMappingsProtocol getUgmProtocol() throws IOException {
+    GetUserMappingsProtocol userGroupMappingProtocol = (GetUserMappingsProtocol)
+      RPC.getProxy(GetUserMappingsProtocol.class,
+          GetUserMappingsProtocol.versionID,
+          getProtocolAddress(getConf()), UserGroupInformation.getCurrentUser(),
+          getConf(), NetUtils.getSocketFactory(getConf(),
+              GetUserMappingsProtocol.class));
+    return userGroupMappingProtocol;
+  }
+
+}
\ No newline at end of file
diff --git a/src/core/org/apache/hadoop/tools/GetUserMappingsProtocol.java b/src/core/org/apache/hadoop/tools/GetUserMappingsProtocol.java
new file mode 100644
index 0000000..6267b82
--- /dev/null
+++ b/src/core/org/apache/hadoop/tools/GetUserMappingsProtocol.java
@@ -0,0 +1,46 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.hadoop.tools;
+
+import java.io.IOException;
+
+//import org.apache.hadoop.classification.InterfaceAudience;
+//import org.apache.hadoop.classification.InterfaceStability;
+import org.apache.hadoop.ipc.VersionedProtocol;
+
+/**
+ * Protocol implemented by the Name Node and Job Tracker which maps users to
+ * groups.
+ */
+//@InterfaceAudience.LimitedPrivate({"HDFS", "MapReduce"})
+//@InterfaceStability.Evolving
+public interface GetUserMappingsProtocol extends VersionedProtocol {
+  
+  /**
+   * Version 1: Initial version.
+   */
+  public static final long versionID = 1L;
+  
+  /**
+   * Get the groups which are mapped to the given user.
+   * @param user The user to get the groups for.
+   * @return The set of groups the user belongs to.
+   * @throws IOException
+   */
+  public String[] getGroupsForUser(String user) throws IOException;
+}
\ No newline at end of file
diff --git a/src/hdfs/org/apache/hadoop/hdfs/HDFSPolicyProvider.java b/src/hdfs/org/apache/hadoop/hdfs/HDFSPolicyProvider.java
index e8e1185..1462917 100644
--- a/src/hdfs/org/apache/hadoop/hdfs/HDFSPolicyProvider.java
+++ b/src/hdfs/org/apache/hadoop/hdfs/HDFSPolicyProvider.java
@@ -26,6 +26,7 @@ import org.apache.hadoop.security.RefreshUserMappingsProtocol;
 import org.apache.hadoop.security.authorize.PolicyProvider;
 import org.apache.hadoop.security.authorize.RefreshAuthorizationPolicyProtocol;
 import org.apache.hadoop.security.authorize.Service;
+import org.apache.hadoop.tools.GetUserMappingsProtocol;
 
 /**
  * {@link PolicyProvider} for HDFS protocols.
@@ -44,6 +45,8 @@ public class HDFSPolicyProvider extends PolicyProvider {
                 RefreshAuthorizationPolicyProtocol.class),
     new Service("security.refresh.usertogroups.mappings.protocol.acl", 
                 RefreshUserMappingsProtocol.class),
+    new Service("security.get.user.mappings.protocol.acl",
+                GetUserMappingsProtocol.class)
   };
   
   @Override
diff --git a/src/hdfs/org/apache/hadoop/hdfs/server/namenode/NameNode.java b/src/hdfs/org/apache/hadoop/hdfs/server/namenode/NameNode.java
index b3c4ab0..b8740f1 100644
--- a/src/hdfs/org/apache/hadoop/hdfs/server/namenode/NameNode.java
+++ b/src/hdfs/org/apache/hadoop/hdfs/server/namenode/NameNode.java
@@ -46,6 +46,7 @@ import org.apache.hadoop.io.Text;
 import org.apache.hadoop.ipc.*;
 import org.apache.hadoop.ipc.RPC.Server;
 import org.apache.hadoop.conf.*;
+import org.apache.hadoop.tools.GetUserMappingsProtocol;
 import org.apache.hadoop.util.PluginDispatcher;
 import org.apache.hadoop.util.StringUtils;
 import org.apache.hadoop.net.NetUtils;
@@ -109,7 +110,8 @@ import java.util.List;
 public class NameNode implements ClientProtocol, DatanodeProtocol,
                                  NamenodeProtocol, FSConstants,
                                  RefreshAuthorizationPolicyProtocol,
-                                 RefreshUserMappingsProtocol {
+                                 RefreshUserMappingsProtocol,
+                                 GetUserMappingsProtocol {
   static{
     Configuration.addDefaultResource("hdfs-default.xml");
     Configuration.addDefaultResource("hdfs-site.xml");
@@ -127,6 +129,8 @@ public class NameNode implements ClientProtocol, DatanodeProtocol,
       return RefreshAuthorizationPolicyProtocol.versionID;
     } else if (protocol.equals(RefreshUserMappingsProtocol.class.getName())){
       return RefreshUserMappingsProtocol.versionID;
+    } else if (protocol.equals(GetUserMappingsProtocol.class.getName())){
+      return GetUserMappingsProtocol.versionID;
     } else {
       throw new IOException("Unknown protocol to name node: " + protocol);
     }
@@ -1142,7 +1146,15 @@ public class NameNode implements ClientProtocol, DatanodeProtocol,
     
     ProxyUsers.refreshSuperUserGroupsConfiguration();
   }
-
+  
+  @Override
+  public String[] getGroupsForUser(String user) throws IOException {
+    if (LOG.isDebugEnabled()) {
+      LOG.debug("Getting groups for user " + user);
+    }
+    return UserGroupInformation.createRemoteUser(user).getGroupNames();
+  }
+  
   private static void printUsage() {
     System.err.println(
       "Usage: java NameNode [" +
diff --git a/src/hdfs/org/apache/hadoop/hdfs/tools/GetGroups.java b/src/hdfs/org/apache/hadoop/hdfs/tools/GetGroups.java
new file mode 100644
index 0000000..ceb770d
--- /dev/null
+++ b/src/hdfs/org/apache/hadoop/hdfs/tools/GetGroups.java
@@ -0,0 +1,58 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.hadoop.hdfs.tools;
+
+import java.io.IOException;
+import java.io.PrintStream;
+import java.net.InetSocketAddress;
+
+import org.apache.hadoop.conf.Configuration;
+import org.apache.hadoop.hdfs.server.namenode.NameNode;
+import org.apache.hadoop.tools.GetGroupsBase;
+import org.apache.hadoop.util.ToolRunner;
+
+/**
+ * HDFS implementation of a tool for getting the groups which a given user
+ * belongs to.
+ */
+public class GetGroups extends GetGroupsBase {
+  
+  static {
+    Configuration.addDefaultResource("hdfs-default.xml");
+    Configuration.addDefaultResource("hdfs-site.xml");
+  }
+  
+  GetGroups(Configuration conf) {
+    super(conf);
+  }
+
+  GetGroups(Configuration conf, PrintStream out) {
+    super(conf, out);
+  }
+  
+  @Override
+  protected InetSocketAddress getProtocolAddress(Configuration conf)
+      throws IOException {
+    return NameNode.getAddress(conf);
+  }
+
+  public static void main(String[] argv) throws Exception {
+    int res = ToolRunner.run(new GetGroups(new Configuration()), argv);
+    System.exit(res);
+  }
+}
\ No newline at end of file
diff --git a/src/mapred/org/apache/hadoop/mapred/JobTracker.java b/src/mapred/org/apache/hadoop/mapred/JobTracker.java
index 58ae0b4..d0b9889 100644
--- a/src/mapred/org/apache/hadoop/mapred/JobTracker.java
+++ b/src/mapred/org/apache/hadoop/mapred/JobTracker.java
@@ -113,6 +113,7 @@ import org.apache.hadoop.mapreduce.security.token.DelegationTokenRenewal;
 import org.apache.hadoop.mapreduce.security.token.JobTokenSecretManager;
 import org.apache.hadoop.mapreduce.server.jobtracker.TaskTracker;
 import org.apache.hadoop.security.Credentials;
+import org.apache.hadoop.tools.GetUserMappingsProtocol;
 import org.mortbay.util.ajax.JSON;
 
 /*******************************************************
@@ -123,7 +124,7 @@ import org.mortbay.util.ajax.JSON;
 public class JobTracker implements MRConstants, InterTrackerProtocol,
     JobSubmissionProtocol, TaskTrackerManager, RefreshUserMappingsProtocol,
     RefreshAuthorizationPolicyProtocol, AdminOperationsProtocol,
-    JobTrackerMXBean {
+    JobTrackerMXBean, GetUserMappingsProtocol {
 
   static{
     Configuration.addDefaultResource("mapred-default.xml");
@@ -334,6 +335,8 @@ public class JobTracker implements MRConstants, InterTrackerProtocol,
       return AdminOperationsProtocol.versionID;
     } else if (protocol.equals(RefreshUserMappingsProtocol.class.getName())){
       return RefreshUserMappingsProtocol.versionID;
+    } else if (protocol.equals(GetUserMappingsProtocol.class.getName())) {
+      return GetUserMappingsProtocol.versionID;
     } else {
       throw new IOException("Unknown protocol to job tracker: " + protocol);
     }
@@ -4911,6 +4914,14 @@ public class JobTracker implements MRConstants, InterTrackerProtocol,
     
     ProxyUsers.refreshSuperUserGroupsConfiguration();
   }
+  
+  @Override
+  public String[] getGroupsForUser(String user) throws IOException {
+    if (LOG.isDebugEnabled()) {
+      LOG.debug("Getting groups for user " + user);
+    }
+    return UserGroupInformation.createRemoteUser(user).getGroupNames();
+  }
     
   @Override
   public void refreshUserToGroupsMappings() throws IOException {
diff --git a/src/mapred/org/apache/hadoop/mapred/MapReducePolicyProvider.java b/src/mapred/org/apache/hadoop/mapred/MapReducePolicyProvider.java
index 1d8dc30..03f6c59 100644
--- a/src/mapred/org/apache/hadoop/mapred/MapReducePolicyProvider.java
+++ b/src/mapred/org/apache/hadoop/mapred/MapReducePolicyProvider.java
@@ -21,6 +21,7 @@ import org.apache.hadoop.security.RefreshUserMappingsProtocol;
 import org.apache.hadoop.security.authorize.PolicyProvider;
 import org.apache.hadoop.security.authorize.RefreshAuthorizationPolicyProtocol;
 import org.apache.hadoop.security.authorize.Service;
+import org.apache.hadoop.tools.GetUserMappingsProtocol;
 
 /**
  * {@link PolicyProvider} for Map-Reduce protocols.
@@ -40,6 +41,8 @@ public class MapReducePolicyProvider extends PolicyProvider {
                   RefreshUserMappingsProtocol.class),
       new Service("security.admin.operations.protocol.acl", 
                   AdminOperationsProtocol.class),
+      new Service("security.get.user.mappings.protocol.acl",
+                  GetUserMappingsProtocol.class),
   };
   
   @Override
diff --git a/src/mapred/org/apache/hadoop/mapred/tools/GetGroups.java b/src/mapred/org/apache/hadoop/mapred/tools/GetGroups.java
new file mode 100644
index 0000000..a2be335
--- /dev/null
+++ b/src/mapred/org/apache/hadoop/mapred/tools/GetGroups.java
@@ -0,0 +1,58 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.hadoop.mapred.tools;
+
+import java.io.IOException;
+import java.io.PrintStream;
+import java.net.InetSocketAddress;
+
+import org.apache.hadoop.conf.Configuration;
+import org.apache.hadoop.mapred.JobTracker;
+import org.apache.hadoop.tools.GetGroupsBase;
+import org.apache.hadoop.util.ToolRunner;
+
+/**
+ * MR implementation of a tool for getting the groups which a given user
+ * belongs to.
+ */
+public class GetGroups extends GetGroupsBase {
+
+  static {
+    Configuration.addDefaultResource("mapred-default.xml");
+    Configuration.addDefaultResource("mapred-site.xml");
+  }
+  
+  GetGroups(Configuration conf) {
+    super(conf);
+  }
+  
+  GetGroups(Configuration conf, PrintStream out) {
+    super(conf, out);
+  }
+
+  @Override
+  protected InetSocketAddress getProtocolAddress(Configuration conf)
+      throws IOException {
+    return JobTracker.getAddress(conf);
+  }
+
+  public static void main(String[] argv) throws Exception {
+    int res = ToolRunner.run(new GetGroups(new Configuration()), argv);
+    System.exit(res);
+  }
+}
\ No newline at end of file
diff --git a/src/test/org/apache/hadoop/hdfs/tools/TestGetHdfsGroups.java b/src/test/org/apache/hadoop/hdfs/tools/TestGetHdfsGroups.java
new file mode 100644
index 0000000..4c67877
--- /dev/null
+++ b/src/test/org/apache/hadoop/hdfs/tools/TestGetHdfsGroups.java
@@ -0,0 +1,54 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.hadoop.hdfs.tools;
+
+import java.io.IOException;
+import java.io.PrintStream;
+
+import org.apache.hadoop.conf.Configuration;
+import org.apache.hadoop.hdfs.MiniDFSCluster;
+import org.apache.hadoop.tools.GetGroupsTestBase;
+import org.apache.hadoop.util.Tool;
+import org.junit.After;
+import org.junit.Before;
+
+/**
+ * Tests for the HDFS implementation of {@link GetGroups}
+ */
+public class TestGetHdfsGroups extends GetGroupsTestBase {
+  
+  private MiniDFSCluster cluster;
+
+  @Before
+  public void setUpNameNode() throws IOException {
+    conf = new Configuration();
+    cluster = new MiniDFSCluster(conf, 0, true, null);
+    cluster.waitActive();
+  }
+  
+  @After
+  public void tearDownNameNode() {
+    cluster.shutdown();
+  }
+
+  @Override
+  protected Tool getTool(PrintStream o) {
+    return new GetGroups(conf, o);
+  }
+
+}
\ No newline at end of file
diff --git a/src/test/org/apache/hadoop/mapred/tools/TestGetMapReduceGroups.java b/src/test/org/apache/hadoop/mapred/tools/TestGetMapReduceGroups.java
new file mode 100644
index 0000000..f03cc87
--- /dev/null
+++ b/src/test/org/apache/hadoop/mapred/tools/TestGetMapReduceGroups.java
@@ -0,0 +1,53 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.hadoop.mapred.tools;
+
+import java.io.IOException;
+import java.io.PrintStream;
+
+import org.apache.hadoop.mapred.MiniMRCluster;
+import org.apache.hadoop.mapred.tools.GetGroups;
+import org.apache.hadoop.tools.GetGroupsTestBase;
+import org.apache.hadoop.util.Tool;
+import org.junit.After;
+import org.junit.Before;
+
+/**
+ * Tests for the MR implementation of {@link GetGroups}
+ */
+public class TestGetMapReduceGroups extends GetGroupsTestBase {
+  
+  private MiniMRCluster cluster;
+
+  @Before
+  public void setUpJobTracker() throws IOException, InterruptedException {
+    cluster = new MiniMRCluster(0, "file:///", 1);
+    conf = cluster.createJobConf();
+  }
+  
+  @After
+  public void tearDownJobTracker() throws IOException {
+    cluster.shutdown();
+  }
+
+  @Override
+  protected Tool getTool(PrintStream o) {
+    return new GetGroups(conf, o);
+  }
+
+}
\ No newline at end of file
diff --git a/src/test/org/apache/hadoop/tools/GetGroupsTestBase.java b/src/test/org/apache/hadoop/tools/GetGroupsTestBase.java
new file mode 100644
index 0000000..f4ecd82
--- /dev/null
+++ b/src/test/org/apache/hadoop/tools/GetGroupsTestBase.java
@@ -0,0 +1,127 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.hadoop.tools;
+
+import static org.junit.Assert.assertEquals;
+
+import java.io.ByteArrayOutputStream;
+import java.io.IOException;
+import java.io.PrintStream;
+
+import org.apache.hadoop.conf.Configuration;
+import org.apache.hadoop.security.UserGroupInformation;
+import org.apache.hadoop.util.Tool;
+import org.apache.hadoop.util.ToolRunner;
+import org.junit.Before;
+import org.junit.Test;
+
+public abstract class GetGroupsTestBase {
+
+  protected Configuration conf;
+  private UserGroupInformation testUser1;
+  private UserGroupInformation testUser2;
+
+  protected abstract Tool getTool(PrintStream o);
+
+  @Before
+  public void setUpUsers() throws IOException {
+    // Make sure the current user's info is in the list of test users.
+    UserGroupInformation currentUser = UserGroupInformation.getCurrentUser();
+    UserGroupInformation.createUserForTesting(currentUser.getUserName(), currentUser.getGroupNames());
+
+    testUser1 = UserGroupInformation.createUserForTesting("foo", new String[]{"bar", "baz"});
+    testUser2 = UserGroupInformation.createUserForTesting("fiz", new String[]{"buz", "boz"});
+  }
+  
+  @Test
+  public void testNoUserGiven() throws Exception {
+    String actualOutput = runTool(conf, new String[0], true);
+    UserGroupInformation currentUser = UserGroupInformation.getCurrentUser();
+    assertEquals("No user provided should default to current user",
+        getExpectedOutput(currentUser), actualOutput);
+  }
+
+  @Test
+  public void testExistingUser() throws Exception {
+    String actualOutput = runTool(conf, new String[]{testUser1.getUserName()}, true);
+    assertEquals("Show only the output of the user given",
+        getExpectedOutput(testUser1), actualOutput);
+  }
+
+  @Test
+  public void testMultipleExistingUsers() throws Exception {
+    String actualOutput = runTool(conf,
+        new String[]{testUser1.getUserName(), testUser2.getUserName()}, true);
+    assertEquals("Show the output for both users given",
+        getExpectedOutput(testUser1) + getExpectedOutput(testUser2), actualOutput);
+  }
+
+  @Test
+  public void testNonExistentUser() throws Exception {
+    String actualOutput = runTool(conf,
+        new String[]{"does-not-exist"}, true);
+    assertEquals("Show the output for only the user given, with no groups",
+        getExpectedOutput(UserGroupInformation.createRemoteUser("does-not-exist")),
+        actualOutput);
+  }
+
+  @Test
+  public void testMultipleNonExistingUsers() throws Exception {
+    String actualOutput = runTool(conf,
+        new String[]{"does-not-exist1", "does-not-exist2"}, true);
+    assertEquals("Show the output for only the user given, with no groups",
+        getExpectedOutput(UserGroupInformation.createRemoteUser("does-not-exist1")) +
+        getExpectedOutput(UserGroupInformation.createRemoteUser("does-not-exist2")),
+        actualOutput);
+  }
+
+  @Test
+  public void testExistingInterleavedWithNonExistentUsers() throws Exception {
+    String actualOutput = runTool(conf,
+        new String[]{"does-not-exist1", testUser1.getUserName(),
+                     "does-not-exist2", testUser2.getUserName()}, true);
+    assertEquals("Show the output for only the user given, with no groups",
+        getExpectedOutput(UserGroupInformation.createRemoteUser("does-not-exist1")) +
+        getExpectedOutput(testUser1) +
+        getExpectedOutput(UserGroupInformation.createRemoteUser("does-not-exist2")) +
+        getExpectedOutput(testUser2),
+        actualOutput);
+  }
+
+  private static String getExpectedOutput(UserGroupInformation user) {
+    String expectedOutput = user.getUserName() + " :";
+    for (String group : user.getGroupNames()) {
+      expectedOutput += " " + group;
+    }
+    return expectedOutput + "\n";
+  }
+
+  private String runTool(Configuration conf, String[] args, boolean success)
+      throws Exception {
+    ByteArrayOutputStream o = new ByteArrayOutputStream();
+    PrintStream out = new PrintStream(o, true);
+    try {
+      int ret = ToolRunner.run(getTool(out), args);
+      assertEquals(success, ret == 0);
+      return o.toString();
+    } finally {
+      o.close();
+      out.close();
+    }
+  }
+}
\ No newline at end of file
-- 
1.7.0.4

