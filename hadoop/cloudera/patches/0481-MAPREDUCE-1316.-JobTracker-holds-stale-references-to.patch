From 364fd3118df3fb08ec239306fcc3b1762cb803d0 Mon Sep 17 00:00:00 2001
From: Todd Lipcon <todd@cloudera.com>
Date: Mon, 22 Feb 2010 17:11:21 +0530
Subject: [PATCH 0481/1020] MAPREDUCE-1316. JobTracker holds stale references to retired jobs via unreported tasks

Patch: https://issues.apache.org/jira/secure/attachment/12436563/mapreduce-1316-y20s.patch
Author: Amar Kamat
Ref: YDH
---
 .../org/apache/hadoop/mapred/JobInProgress.java    |    2 ++
 .../org/apache/hadoop/mapred/MiniMRCluster.java    |    2 +-
 .../org/apache/hadoop/mapred/TestJobRetire.java    |   10 +++++-----
 .../org/apache/hadoop/mapred/TestLostTracker.java  |    1 +
 4 files changed, 9 insertions(+), 6 deletions(-)

diff --git a/src/mapred/org/apache/hadoop/mapred/JobInProgress.java b/src/mapred/org/apache/hadoop/mapred/JobInProgress.java
index fff3cb7..f9e6000 100644
--- a/src/mapred/org/apache/hadoop/mapred/JobInProgress.java
+++ b/src/mapred/org/apache/hadoop/mapred/JobInProgress.java
@@ -306,6 +306,8 @@ public class JobInProgress {
     this.runningReduces = new LinkedHashSet<TaskInProgress>();
     this.resourceEstimator = new ResourceEstimator(this);
     this.status = new JobStatus(jobid, 0.0f, 0.0f, JobStatus.PREP);
+    this.profile = new JobProfile(conf.getUser(), jobid, "", "",
+                                  conf.getJobName(), conf.getQueueName());
     this.taskCompletionEvents = new ArrayList<TaskCompletionEvent>
       (numMapTasks + numReduceTasks + 10);
     try {
diff --git a/src/test/org/apache/hadoop/mapred/MiniMRCluster.java b/src/test/org/apache/hadoop/mapred/MiniMRCluster.java
index 8450a26..6f9f044 100644
--- a/src/test/org/apache/hadoop/mapred/MiniMRCluster.java
+++ b/src/test/org/apache/hadoop/mapred/MiniMRCluster.java
@@ -694,7 +694,7 @@ public class MiniMRCluster {
   /**
    * Add a tasktracker to the Mini-MR cluster.
    */
-  void addTaskTracker(TaskTrackerRunner taskTracker) throws IOException {
+  void addTaskTracker(TaskTrackerRunner taskTracker) {
     Thread taskTrackerThread = new Thread(taskTracker);
     taskTrackerList.add(taskTracker);
     taskTrackerThreadList.add(taskTrackerThread);
diff --git a/src/test/org/apache/hadoop/mapred/TestJobRetire.java b/src/test/org/apache/hadoop/mapred/TestJobRetire.java
index bfdb6ee..d05b21f 100644
--- a/src/test/org/apache/hadoop/mapred/TestJobRetire.java
+++ b/src/test/org/apache/hadoop/mapred/TestJobRetire.java
@@ -136,7 +136,7 @@ public class TestJobRetire extends TestCase {
    */
   class WaitingTaskTracker extends TaskTracker {
     
-    WaitingTaskTracker(JobConf conf) throws IOException, InterruptedException {
+    WaitingTaskTracker(JobConf conf) throws InterruptedException, IOException {
       super(conf);
     }
     
@@ -194,7 +194,7 @@ public class TestJobRetire extends TestCase {
       TaskTrackerRunner testTrackerRunner = 
         mr.new TaskTrackerRunner(1, 1, null, mr.createJobConf()) {
         @Override
-        TaskTracker createTaskTracker(JobConf conf) throws IOException, InterruptedException {
+        TaskTracker createTaskTracker(JobConf conf) throws InterruptedException, IOException {
           return new WaitingTaskTracker(conf);
         }
       };
@@ -290,7 +290,7 @@ public class TestJobRetire extends TestCase {
     // now create a fake tip for this fake job
     TaskInProgress tip = null;
     if (type == TaskType.MAP) {
-      tip = new TaskInProgress(id, "dummy", JobSplit.EMPTY_TASK_SPLIT,
+      tip = new TaskInProgress(id, "dummy", JobSplit.EMPTY_TASK_SPLIT, 
                                jobtracker, conf, jip, 0, 1);
       jip.maps = new TaskInProgress[] {tip};
     } else if (type == TaskType.REDUCE) {
@@ -299,12 +299,12 @@ public class TestJobRetire extends TestCase {
       jip.reduces = new TaskInProgress[] {tip};
     } else if (type == TaskType.JOB_SETUP) {
       tip = 
-        new TaskInProgress(id, "dummy", JobSplit.EMPTY_TASK_SPLIT,
+        new TaskInProgress(id, "dummy", JobSplit.EMPTY_TASK_SPLIT, 
                            jobtracker, conf, jip, 0, 1);
       jip.setup = new TaskInProgress[] {tip};
     } else if (type == TaskType.JOB_CLEANUP) {
       tip = 
-        new TaskInProgress(id, "dummy", JobSplit.EMPTY_TASK_SPLIT,
+        new TaskInProgress(id, "dummy", JobSplit.EMPTY_TASK_SPLIT, 
                            jobtracker, conf, jip, 0, 1);
       jip.cleanup = new TaskInProgress[] {tip};
     }
diff --git a/src/test/org/apache/hadoop/mapred/TestLostTracker.java b/src/test/org/apache/hadoop/mapred/TestLostTracker.java
index 9a06df2..e69b157 100644
--- a/src/test/org/apache/hadoop/mapred/TestLostTracker.java
+++ b/src/test/org/apache/hadoop/mapred/TestLostTracker.java
@@ -22,6 +22,7 @@ import org.apache.hadoop.fs.*;
 import org.apache.hadoop.hdfs.MiniDFSCluster;
 import org.apache.hadoop.mapreduce.TaskType;
 import org.apache.hadoop.security.UserGroupInformation;
+import org.apache.hadoop.mapreduce.TaskType;
 
 import junit.framework.TestCase;
 import java.io.*;
-- 
1.7.0.4

