From 03e35485989da9f5d60dacdcfc67e8566b8590f8 Mon Sep 17 00:00:00 2001
From: Todd Lipcon <todd@cloudera.com>
Date: Thu, 25 Feb 2010 10:14:22 -0800
Subject: [PATCH 0499/1020] HADOOP-6579. Add a mechanism for encoding and decoding Tokens in to
 url-safe strings. Also change commons-codec library to 1.4.

Author: Owen O'Malley
Ref: CDH-648
---
 .eclipse.templates/.classpath                      |    2 +-
 ivy/hadoop-core-pom-template.xml                   |    2 +-
 ivy/libraries.properties                           |    2 +-
 .../org/apache/hadoop/security/token/Token.java    |  121 +++++++++++++++++++-
 .../org/apache/hadoop/io/compress/TestCodec.java   |    2 +-
 .../apache/hadoop/security/token/TestToken.java    |   37 ++++++
 6 files changed, 161 insertions(+), 5 deletions(-)
 delete mode 100644 ivy/hadoop-core.pom

diff --git a/.eclipse.templates/.classpath b/.eclipse.templates/.classpath
index 7613447..7ea4fce 100644
--- a/.eclipse.templates/.classpath
+++ b/.eclipse.templates/.classpath
@@ -20,7 +20,7 @@
   	<classpathentry kind="lib" path="lib/jsp-2.1/jsp-api-2.1.jar"/>
 	<classpathentry kind="lib" path="lib/mysql-connector-java-5.0.8-bin.jar"/>
 	<classpathentry kind="lib" path="lib/hsqldb.jar"/>
-	<classpathentry kind="lib" path="build/ivy/lib/Hadoop/common/commons-codec-1.3.jar"/>
+	<classpathentry kind="lib" path="build/ivy/lib/Hadoop/common/commons-codec-1.4.jar"/>
 	<classpathentry kind="lib" path="build/ivy/lib/Hadoop/common/commons-httpclient-3.0.1.jar"/>
 	<classpathentry kind="lib" path="build/ivy/lib/Hadoop/common/commons-el-1.0.jar"/>
 	<classpathentry kind="lib" path="build/ivy/lib/Hadoop/common/jasper-compiler-5.5.12.jar"/>
diff --git a/ivy/hadoop-core-pom-template.xml b/ivy/hadoop-core-pom-template.xml
index 9e2bb65..c59e179 100644
--- a/ivy/hadoop-core-pom-template.xml
+++ b/ivy/hadoop-core-pom-template.xml
@@ -41,7 +41,7 @@
     <dependency>
       <groupId>commons-codec</groupId>
       <artifactId>commons-codec</artifactId>
-      <version>1.3</version>
+      <version>1.4</version>
     </dependency>
     <dependency>
       <groupId>commons-net</groupId>
diff --git a/ivy/hadoop-core.pom b/ivy/hadoop-core.pom
deleted file mode 100644
index e69de29..0000000
diff --git a/ivy/libraries.properties b/ivy/libraries.properties
index 4a1d0ec..6f7f193 100644
--- a/ivy/libraries.properties
+++ b/ivy/libraries.properties
@@ -25,7 +25,7 @@ aspectj.version=1.6.5
 checkstyle.version=4.2
 
 commons-cli.version=1.2
-commons-codec.version=1.3
+commons-codec.version=1.4
 commons-collections.version=3.1
 commons-httpclient.version=3.0.1
 commons-lang.version=2.4
diff --git a/src/core/org/apache/hadoop/security/token/Token.java b/src/core/org/apache/hadoop/security/token/Token.java
index 743db44..a8e3485 100644
--- a/src/core/org/apache/hadoop/security/token/Token.java
+++ b/src/core/org/apache/hadoop/security/token/Token.java
@@ -21,9 +21,15 @@ package org.apache.hadoop.security.token;
 import java.io.DataInput;
 import java.io.DataOutput;
 import java.io.IOException;
+import java.util.Arrays;
 
+import org.apache.commons.codec.binary.Base64;
+
+import org.apache.hadoop.io.DataInputBuffer;
+import org.apache.hadoop.io.DataOutputBuffer;
 import org.apache.hadoop.io.Text;
 import org.apache.hadoop.io.Writable;
+import org.apache.hadoop.io.WritableComparator;
 import org.apache.hadoop.io.WritableUtils;
 
 /**
@@ -47,7 +53,21 @@ public class Token<T extends TokenIdentifier> implements Writable {
     kind = id.getKind();
     service = new Text();
   }
-  
+ 
+  /**
+   * Construct a token from the components.
+   * @param identifier the token identifier
+   * @param password the token's password
+   * @param kind the kind of token
+   * @param service the service for this token
+   */
+  public Token(byte[] identifier, byte[] password, Text kind, Text service) {
+    this.identifier = identifier;
+    this.password = password;
+    this.kind = kind;
+    this.service = service;
+  }
+
   /**
    * Default constructor
    */
@@ -123,4 +143,103 @@ public class Token<T extends TokenIdentifier> implements Writable {
     kind.write(out);
     service.write(out);
   }
+
+  /**
+   * Generate a string with the url-quoted base64 encoded serialized form
+   * of the Writable.
+   * @param obj the object to serialize
+   * @return the encoded string
+   * @throws IOException
+   */
+  private static String encodeWritable(Writable obj) throws IOException {
+    DataOutputBuffer buf = new DataOutputBuffer();
+    obj.write(buf);
+    Base64 encoder = new Base64(0, null, true);
+    byte[] raw = new byte[buf.getLength()];
+    System.arraycopy(buf.getData(), 0, raw, 0, buf.getLength());
+    return encoder.encodeToString(raw);
+  }
+  
+  /**
+   * Modify the writable to the value from the newValue
+   * @param obj the object to read into
+   * @param newValue the string with the url-safe base64 encoded bytes
+   * @throws IOException
+   */
+  private static void decodeWritable(Writable obj, 
+                                     String newValue) throws IOException {
+    Base64 decoder = new Base64(0, null, true);
+    DataInputBuffer buf = new DataInputBuffer();
+    byte[] decoded = decoder.decode(newValue);
+    buf.reset(decoded, decoded.length);
+    obj.readFields(buf);
+  }
+
+  /**
+   * Encode this token as a url safe string
+   * @return the encoded string
+   * @throws IOException
+   */
+  public String encodeToUrlString() throws IOException {
+    return encodeWritable(this);
+  }
+  
+  /**
+   * Decode the given url safe string into this token.
+   * @param newValue the encoded string
+   * @throws IOException
+   */
+  public void decodeFromUrlString(String newValue) throws IOException {
+    decodeWritable(this, newValue);
+  }
+  
+  @SuppressWarnings("unchecked")
+  @Override
+  public boolean equals(Object right) {
+    if (this == right) {
+      return true;
+    } else if (right == null || getClass() != right.getClass()) {
+      return false;
+    } else {
+      Token<T> r = (Token<T>) right;
+      return Arrays.equals(identifier, r.identifier) &&
+             Arrays.equals(password, r.password) &&
+             kind.equals(r.kind) &&
+             service.equals(r.service);
+    }
+  }
+  
+  @Override
+  public int hashCode() {
+    return WritableComparator.hashBytes(identifier, identifier.length);
+  }
+  
+  private static void addBinaryBuffer(StringBuilder buffer, byte[] bytes) {
+    for (int idx = 0; idx < bytes.length; idx++) {
+      // if not the first, put a blank separator in
+      if (idx != 0) {
+        buffer.append(' ');
+      }
+      String num = Integer.toHexString(0xff & bytes[idx]);
+      // if it is only one digit, add a leading 0.
+      if (num.length() < 2) {
+        buffer.append('0');
+      }
+      buffer.append(num);
+    }
+  }
+
+  @Override
+  public String toString() {
+    StringBuilder buffer = new StringBuilder();
+    buffer.append("Ident: ");
+    addBinaryBuffer(buffer, identifier);
+    buffer.append(", Pass: ");
+    addBinaryBuffer(buffer, password);
+    buffer.append(", Kind: ");
+    buffer.append(kind.toString());
+    buffer.append(", Service: ");
+    buffer.append(service.toString());
+    return buffer.toString();
+  }
 }
diff --git a/src/test/org/apache/hadoop/io/compress/TestCodec.java b/src/test/org/apache/hadoop/io/compress/TestCodec.java
index a0ddff8..9b1910a 100644
--- a/src/test/org/apache/hadoop/io/compress/TestCodec.java
+++ b/src/test/org/apache/hadoop/io/compress/TestCodec.java
@@ -244,7 +244,7 @@ public class TestCodec {
         codec.getClass().getSimpleName());
     final Path file = new Path(wd, "test" + codec.getDefaultExtension());
     final byte[] b = new byte[REC_SIZE];
-    final Base64 b64 = new Base64();
+    final Base64 b64 = new Base64(0, null);
     DataOutputStream fout = null;
     Compressor cmp = CodecPool.getCompressor(codec);
     try {
diff --git a/src/test/org/apache/hadoop/security/token/TestToken.java b/src/test/org/apache/hadoop/security/token/TestToken.java
index c771812..54b75da 100644
--- a/src/test/org/apache/hadoop/security/token/TestToken.java
+++ b/src/test/org/apache/hadoop/security/token/TestToken.java
@@ -22,6 +22,7 @@ import java.io.*;
 import java.util.Arrays;
 
 import org.apache.hadoop.io.*;
+import org.apache.hadoop.security.token.delegation.AbstractDelegationTokenIdentifier;
 
 import junit.framework.TestCase;
 
@@ -58,4 +59,40 @@ public class TestToken extends TestCase {
     destToken.readFields(in);
     assertTrue(checkEqual(sourceToken, destToken));
   }
+  
+  private static void checkUrlSafe(String str) throws Exception {
+    int len = str.length();
+    for(int i=0; i < len; ++i) {
+      char ch = str.charAt(i);
+      if (ch == '-') continue;
+      if (ch == '_') continue;
+      if (ch >= '0' && ch <= '9') continue;
+      if (ch >= 'A' && ch <= 'Z') continue;
+      if (ch >= 'a' && ch <= 'z') continue;
+      fail("Encoded string " + str + 
+           " has invalid character at position " + i);
+    }
+  }
+
+  public static void testEncodeWritable() throws Exception {
+    String[] values = new String[]{"", "a", "bb", "ccc", "dddd", "eeeee",
+        "ffffff", "ggggggg", "hhhhhhhh", "iiiiiiiii",
+        "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLM" +
+             "NOPQRSTUVWXYZ01234567890!@#$%^&*()-=_+[]{}|;':,./<>?"};
+    Token<AbstractDelegationTokenIdentifier> orig;
+    Token<AbstractDelegationTokenIdentifier> copy = 
+      new Token<AbstractDelegationTokenIdentifier>();
+    // ensure that for each string the input and output values match
+    for(int i=0; i< values.length; ++i) {
+      String val = values[i];
+      System.out.println("Input = " + val);
+      orig = new Token<AbstractDelegationTokenIdentifier>(val.getBytes(),
+          val.getBytes(), new Text(val), new Text(val));
+      String encode = orig.encodeToUrlString();
+      copy.decodeFromUrlString(encode);
+      assertEquals(orig, copy);
+      checkUrlSafe(encode);
+    }
+  }
+
 }
-- 
1.7.0.4

