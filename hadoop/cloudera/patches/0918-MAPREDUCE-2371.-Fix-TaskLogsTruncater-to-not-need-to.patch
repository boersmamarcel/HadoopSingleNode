From 8f4bc5f77bb496928529d1d56fe5831d35c89d83 Mon Sep 17 00:00:00 2001
From: Todd Lipcon <todd@cloudera.com>
Date: Tue, 8 Mar 2011 13:24:22 -0800
Subject: [PATCH 0918/1020] MAPREDUCE-2371. Fix TaskLogsTruncater to not need to call obtainLogsDirOwner

Reason: fixes unnecessary fork in child tasks which causes higher ulimit requirements
 compared to CDH2
Author: Todd Lipcon
Ref: CDH-2784
---
 src/mapred/org/apache/hadoop/mapred/Child.java     |   11 ++++++
 src/mapred/org/apache/hadoop/mapred/TaskLog.java   |    5 +--
 .../apache/hadoop/mapred/TaskLogsTruncater.java    |   33 ++++++++++++++------
 3 files changed, 36 insertions(+), 13 deletions(-)

diff --git a/src/mapred/org/apache/hadoop/mapred/Child.java b/src/mapred/org/apache/hadoop/mapred/Child.java
index aceca89..8a223ab 100644
--- a/src/mapred/org/apache/hadoop/mapred/Child.java
+++ b/src/mapred/org/apache/hadoop/mapred/Child.java
@@ -65,8 +65,19 @@ class Child {
   static volatile boolean isCleanup;
   static String cwd;
 
+  private static boolean isChildJvm = false;
+
+  /**
+   * Return true if running in a task/child JVM. This should
+   * only be used for asserts/safety checks.
+   */
+  public static boolean isChildJvm() {
+    return isChildJvm;
+  }
+
   public static void main(String[] args) throws Throwable {
     LOG.debug("Child starting");
+    isChildJvm = true;
 
     final JobConf defaultConf = new JobConf();
     String host = args[0];
diff --git a/src/mapred/org/apache/hadoop/mapred/TaskLog.java b/src/mapred/org/apache/hadoop/mapred/TaskLog.java
index 3d67801..2183fff 100644
--- a/src/mapred/org/apache/hadoop/mapred/TaskLog.java
+++ b/src/mapred/org/apache/hadoop/mapred/TaskLog.java
@@ -25,7 +25,7 @@ import java.io.File;
 import java.io.FileInputStream;
 import java.io.IOException;
 import java.io.InputStream;
-import java.io.InputStreamReader;
+import java.io.FileReader;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Enumeration;
@@ -107,8 +107,7 @@ public class TaskLog {
         new HashMap<LogName, LogFileDetail>();
 
     File indexFile = getIndexFile(taskid, isCleanup);
-    BufferedReader fis = new BufferedReader(new InputStreamReader(
-      SecureIOUtils.openForRead(indexFile, obtainLogDirOwner(taskid))));
+    BufferedReader fis = new BufferedReader(new FileReader(indexFile));
     //the format of the index file is
     //LOG_DIR: <the dir where the task logs are really stored>
     //stdout:<start-offset in the stdout file> <length>
diff --git a/src/mapred/org/apache/hadoop/mapred/TaskLogsTruncater.java b/src/mapred/org/apache/hadoop/mapred/TaskLogsTruncater.java
index f4ed1e2..ce2368d 100644
--- a/src/mapred/org/apache/hadoop/mapred/TaskLogsTruncater.java
+++ b/src/mapred/org/apache/hadoop/mapred/TaskLogsTruncater.java
@@ -42,6 +42,7 @@ import org.apache.hadoop.mapred.TaskLog.LogName;
 import org.apache.hadoop.mapred.TaskLog.LogFileDetail;
 import org.apache.hadoop.mapreduce.server.tasktracker.JVMInfo;
 import org.apache.hadoop.mapreduce.server.tasktracker.userlogs.UserLogManager;
+import org.apache.hadoop.security.UserGroupInformation;
 
 /**
  * The class for truncating the user logs. 
@@ -74,6 +75,15 @@ public class TaskLogsTruncater {
 
   static final int MINIMUM_RETAIN_SIZE_FOR_TRUNCATION = 0;
 
+  private static boolean isTruncaterJvm = false;
+
+  /**
+   * Return true if the current JVM is for truncation only.
+   */
+  public static boolean isTruncaterJvm() {
+    return isTruncaterJvm;
+  }
+
   /**
    * Check the log file sizes generated by the attempts that ran in a
    * particular JVM
@@ -114,17 +124,16 @@ public class TaskLogsTruncater {
    * retainSize.
    */
   public void truncateLogs(JVMInfo lInfo) {
-    if (lInfo.getAllAttempts().isEmpty()) {
-      return;
+    if (UserGroupInformation.isSecurityEnabled() &&
+        !isTruncaterJvm() &&
+        !Child.isChildJvm()) {
+      // Log truncation in a secure cluster should always happen
+      // in child JVMs, since we avoid using the secure open APIs.
+      throw new RuntimeException(
+        "truncateLogs() cannot securely run in TaskTracker.");
     }
 
-    Task firstAttempt = lInfo.getAllAttempts().get(0);
-    String owner;
-    try {
-      owner = TaskLog.obtainLogDirOwner(firstAttempt.getTaskID());
-    } catch (IOException ioe) {
-      LOG.error("Unable to create a secure IO context to truncate logs for " +
-        firstAttempt, ioe);
+    if (lInfo.getAllAttempts().isEmpty()) {
       return;
     }
 
@@ -185,7 +194,9 @@ public class TaskLogsTruncater {
 
       // ////// Open logFile for reading //////
       try {
-        logFileInputStream = SecureIOUtils.openForRead(logFile, owner);
+        // No need to use secure API here, since this only runs in the
+        // context of the job user.
+        logFileInputStream = new FileInputStream(logFile);
       } catch (IOException ioe) {
         if (LOG.isDebugEnabled()) {
           LOG.debug("Cannot open " + logFile.getAbsolutePath()
@@ -487,6 +498,8 @@ public class TaskLogsTruncater {
   }
   
   public static void main(String args[]) throws IOException {
+    isTruncaterJvm = true;
+
     String taskRanFile = args[0];
     Configuration conf = new Configuration();
     
-- 
1.7.0.4

