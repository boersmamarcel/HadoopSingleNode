From 4e93ef108e3ea798f22ef901f090999fe44a8888 Mon Sep 17 00:00:00 2001
From: Todd Lipcon <todd@cloudera.com>
Date: Tue, 15 Feb 2011 19:02:54 -0800
Subject: [PATCH 0882/1020] MAPREDUCE-2180. Add coverage of Fair Scheduler servlet to system test

Reason: improve jcarder coverage for possible deadlocks
Author: Todd Lipcon
Ref: CDH-2660
---
 .../hadoop/mapred/TestFairSchedulerSystem.java     |  117 ++++++++++++++------
 1 files changed, 85 insertions(+), 32 deletions(-)

diff --git a/src/contrib/fairscheduler/src/test/org/apache/hadoop/mapred/TestFairSchedulerSystem.java b/src/contrib/fairscheduler/src/test/org/apache/hadoop/mapred/TestFairSchedulerSystem.java
index e08c25b..b6c85b0 100644
--- a/src/contrib/fairscheduler/src/test/org/apache/hadoop/mapred/TestFairSchedulerSystem.java
+++ b/src/contrib/fairscheduler/src/test/org/apache/hadoop/mapred/TestFairSchedulerSystem.java
@@ -20,23 +20,62 @@ package org.apache.hadoop.mapred;
 import org.apache.hadoop.examples.SleepJob;
 import org.apache.hadoop.util.ToolRunner;
 import org.apache.hadoop.conf.Configuration;
+import java.io.BufferedReader;
+import java.io.InputStream;
+import java.io.InputStreamReader;
+import java.net.URL;
+import java.net.HttpURLConnection;
 import java.util.concurrent.Callable;
 import java.util.concurrent.Executors;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Future;
+import java.util.concurrent.TimeoutException;
+import java.util.concurrent.TimeUnit;
 import java.util.ArrayList;
 import java.util.List;
 
 import org.junit.Test;
+import org.junit.BeforeClass;
+import org.junit.AfterClass;
 import static org.junit.Assert.*;
 
 /**
  * System tests for the fair scheduler. These run slower than the
  * mock-based tests in TestFairScheduler but have a better chance
  * of catching synchronization bugs with the real JT.
+ *
+ * This test suite will often be run inside JCarder in order to catch
+ * deadlock bugs which have plagued the scheduler in the past - hence
+ * it is a bit of a "grab-bag" of system tests, since it's important
+ * that they all run as part of the same JVM instantiation.
  */
 public class TestFairSchedulerSystem {
-  static final int NUM_THREADS=5;
+  static final int NUM_THREADS=2;
+
+  static MiniMRCluster mr;
+  static JobConf conf;
+
+  @BeforeClass
+  public static void setUp() throws Exception {
+    conf = new JobConf();
+    final int taskTrackers = 1;
+
+    // Bump up the frequency of preemption updates to test against
+    // deadlocks, etc.
+    conf.set("mapred.jobtracker.taskScheduler", FairScheduler.class.getCanonicalName());
+    conf.set("mapred.fairscheduler.update.interval", "0");
+    conf.set("mapred.fairscheduler.preemption.interval", "0");
+    conf.set("mapred.fairscheduler.preemption", "true");
+    conf.set("mapred.fairscheduler.eventlog.enabled", "true");
+    mr = new MiniMRCluster(taskTrackers, "file:///", 1, null, null, conf);
+  }
+
+  @AfterClass
+  public static void tearDown() throws Exception {
+    if (mr != null) {
+      mr.shutdown();
+    }
+  }
 
   private void runSleepJob(JobConf conf) throws Exception {
     String[] args = { "-m", "1", "-r", "1", "-mt", "1", "-rt", "1" };
@@ -44,42 +83,56 @@ public class TestFairSchedulerSystem {
   }
 
   /**
-   * Bump up the frequency of preemption updates to test against
-   * deadlocks, etc.
+   * Submit some concurrent sleep jobs, and visit the scheduler servlet
+   * while they're running.
    */
   @Test
-  public void testPreemptionUpdates() throws Exception {
-    MiniMRCluster mr = null;
-    try {
-      final int taskTrackers = 1;
+  public void testFairSchedulerSystem() throws Exception {
+    ExecutorService exec = Executors.newFixedThreadPool(NUM_THREADS);
+    List<Future<Void>> futures = new ArrayList<Future<Void>>(NUM_THREADS);
+    for (int i = 0; i < NUM_THREADS; i++) {
+      futures.add(exec.submit(new Callable<Void>() {
+            public Void call() throws Exception {
+              JobConf jobConf = mr.createJobConf();
+              runSleepJob(jobConf);
+              return null;
+            }
+          }));
+    }
 
-      Configuration conf = new Configuration();
-      conf.set("mapred.jobtracker.taskScheduler", FairScheduler.class.getCanonicalName());
-      conf.set("mapred.fairscheduler.update.interval", "0");
-      conf.set("mapred.fairscheduler.preemption.interval", "0");
-      conf.set("mapred.fairscheduler.preemption", "true");
-      conf.set("mapred.fairscheduler.eventlog.enabled", "true");
-      mr = new MiniMRCluster(taskTrackers, "file:///", 1, null, null, new JobConf(conf));
-      final MiniMRCluster finalMR = mr;
-      ExecutorService exec = Executors.newFixedThreadPool(NUM_THREADS);
-      List<Future<Void>> futures = new ArrayList<Future<Void>>(NUM_THREADS);
-      for (int i = 0; i < NUM_THREADS; i++) {
-        futures.add(exec.submit(new Callable<Void>() {
-          public Void call() throws Exception {
-            JobConf jobConf = finalMR.createJobConf();
-            runSleepJob(jobConf);
-            return null;
-          }
-        }));
-      }
 
-      for (Future<Void> future : futures) {
-        future.get();
-      }
-    } finally {
-      if (mr != null) { mr.shutdown();
+    // Wait for the tasks to finish, and visit the scheduler servlet
+    // every few seconds while waiting.
+    for (Future<Void> future : futures) {
+      while (true) {
+        try {
+          future.get(3, TimeUnit.SECONDS);
+          break;
+        } catch (TimeoutException te) {
+          // It's OK
+        }
+        checkServlet(true);
+        checkServlet(false);
       }
     }
-  
+  }
+ 
+  /**
+   * Check the fair scheduler servlet for good status code and smoke test
+   * for contents.
+   */
+  private void checkServlet(boolean advanced) throws Exception {
+    String jtURL = "http://localhost:" +
+      mr.getJobTrackerRunner().getJobTrackerInfoPort();
+    URL url = new URL(jtURL + "/scheduler" +
+                      (advanced ? "?advanced" : ""));
+    HttpURLConnection connection = (HttpURLConnection)url.openConnection();
+    connection.setRequestMethod("GET");
+    connection.connect();
+    assertEquals(200, connection.getResponseCode());
+
+    // Just to be sure, slurp the content and make sure it looks like the scheduler
+    String contents = slurpContents(connection);
+    assertTrue(contents.contains("Fair Scheduler Administration"));
   }
 }
-- 
1.7.0.4

